Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.


#include <iostream>

/**
 * Returns the single number in the array that appears only once.
 * 
 * @param nums   Array of integers.
 * @param size   Size of the array.
 * @return       The single number.
 */
int singleNumber(int* nums, int size) {
    int result = 0;
    for (int i = 0; i < size; i++) {
        result ^= nums[i];
    }
    return result;
}

int main() {
    // Example usage:
    int nums1[] = {2, 2, 1};
    int nums2[] = {4, 1, 2, 1, 2};
    int nums3[] = {1};

    std::cout << "Single number in nums1: " << singleNumber(nums1, 3) << std::endl;
    std::cout << "Single number in nums2: " << singleNumber(nums2, 5) << std::endl;
    std::cout << "Single number in nums3: " << singleNumber(nums3, 1) << std::endl;

    return 0;
}
